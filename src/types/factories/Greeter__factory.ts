/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Greeter, GreeterInterface } from "../Greeter";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_greeting",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "GreeterError",
    type: "error",
  },
  {
    inputs: [],
    name: "greet",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "greeting",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_greeting",
        type: "string",
      },
    ],
    name: "setGreeting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "throwError",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200096c3803806200096c833981016040819052620000349162000199565b620000646040518060600160405280602281526020016200094a60229139826200008160201b620002911760201c565b805162000079906000906020840190620000f3565b505062000333565b620000ce82826040516024016200009a9291906200027b565b60408051601f198184030181529190526020810180516001600160e01b03908116634b5c427760e01b17909152620000d216565b5050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b8280546200010190620002e0565b90600052602060002090601f01602090048101928262000125576000855562000170565b82601f106200014057805160ff191683800117855562000170565b8280016001018555821562000170579182015b828111156200017057825182559160200191906001019062000153565b506200017e92915062000182565b5090565b5b808211156200017e576000815560010162000183565b600060208284031215620001ab578081fd5b81516001600160401b0380821115620001c2578283fd5b818401915084601f830112620001d6578283fd5b815181811115620001eb57620001eb6200031d565b604051601f8201601f19908116603f011681019083821181831017156200021657620002166200031d565b816040528281528760208487010111156200022f578586fd5b62000242836020830160208801620002ad565b979650505050505050565b6000815180845262000267816020860160208601620002ad565b601f01601f19169290920160200192915050565b6040815260006200029060408301856200024d565b8281036020840152620002a481856200024d565b95945050505050565b60005b83811015620002ca578181015183820152602001620002b0565b83811115620002da576000848401525b50505050565b600181811c90821680620002f557607f821691505b602082108114156200031757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61060780620003436000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632f7643a814610051578063a41368621461005b578063cfae32171461006e578063ef690cc01461008c575b600080fd5b610059610094565b005b610059610069366004610406565b6100ad565b610076610171565b60405161008391906104fb565b60405180910390f35b610076610203565b60405163c8508fc360e01b815260040160405180910390fd5b61015a6040518060600160405280602381526020016105d860239139600080546100d690610586565b80601f016020809104026020016040519081016040528092919081815260200182805461010290610586565b801561014f5780601f106101245761010080835404028352916020019161014f565b820191906000526020600020905b81548152906001019060200180831161013257829003601f168201915b5050505050836102eb565b805161016d90600090602084019061036d565b5050565b60606000805461018090610586565b80601f01602080910402602001604051908101604052809291908181526020018280546101ac90610586565b80156101f95780601f106101ce576101008083540402835291602001916101f9565b820191906000526020600020905b8154815290600101906020018083116101dc57829003601f168201915b5050505050905090565b6000805461021090610586565b80601f016020809104026020016040519081016040528092919081815260200182805461023c90610586565b80156102895780601f1061025e57610100808354040283529160200191610289565b820191906000526020600020905b81548152906001019060200180831161026c57829003601f168201915b505050505081565b61016d82826040516024016102a7929190610515565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16634b5c427760e01b17905261034c565b61034783838360405160240161030393929190610543565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16632ced7cef60e01b17905261034c565b505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b82805461037990610586565b90600052602060002090601f01602090048101928261039b57600085556103e1565b82601f106103b457805160ff19168380011785556103e1565b828001600101855582156103e1579182015b828111156103e15782518255916020019190600101906103c6565b506103ed9291506103f1565b5090565b5b808211156103ed57600081556001016103f2565b600060208284031215610417578081fd5b813567ffffffffffffffff8082111561042e578283fd5b818401915084601f830112610441578283fd5b813581811115610453576104536105c1565b604051601f8201601f19908116603f0116810190838211818310171561047b5761047b6105c1565b81604052828152876020848701011115610493578586fd5b826020860160208301379182016020019490945295945050505050565b60008151808452815b818110156104d5576020818501810151868301820152016104b9565b818111156104e65782602083870101525b50601f01601f19169290920160200192915050565b60208152600061050e60208301846104b0565b9392505050565b60408152600061052860408301856104b0565b828103602084015261053a81856104b0565b95945050505050565b60608152600061055660608301866104b0565b828103602084015261056881866104b0565b9050828103604084015261057c81856104b0565b9695505050505050565b600181811c9082168061059a57607f821691505b602082108114156105bb57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fdfe4368616e67696e67206772656574696e672066726f6d202725732720746f2027257327a164736f6c6343000804000a4465706c6f79696e67206120477265657465722077697468206772656574696e673a";

type GreeterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GreeterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Greeter__factory extends ContractFactory {
  constructor(...args: GreeterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _greeting: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Greeter> {
    return super.deploy(_greeting, overrides || {}) as Promise<Greeter>;
  }
  getDeployTransaction(
    _greeting: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_greeting, overrides || {});
  }
  attach(address: string): Greeter {
    return super.attach(address) as Greeter;
  }
  connect(signer: Signer): Greeter__factory {
    return super.connect(signer) as Greeter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GreeterInterface {
    return new utils.Interface(_abi) as GreeterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Greeter {
    return new Contract(address, _abi, signerOrProvider) as Greeter;
  }
}
